import { Repository } from 'typeorm';
import { OrderEntity, OrderStatus } from './entities/order.entity';
import { OperatorEntity } from '../operator/entities/operator.entity';
import { WablasService } from '../wablas/wablas.service';
import { BackTicketEntity } from './entities/back-ticket.entity';
import { OrderHistoryEntity } from './entities/order-history.entity';
export declare class OrderService {
    private readonly orderRepository;
    private readonly backTicketRepository;
    private readonly orderHistoryRepository;
    private readonly operatorRepository;
    private readonly wablasService;
    constructor(orderRepository: Repository<OrderEntity>, backTicketRepository: Repository<BackTicketEntity>, orderHistoryRepository: Repository<OrderHistoryEntity>, operatorRepository: Repository<OperatorEntity>, wablasService: WablasService);
    orderHistoryAll(): Promise<OrderHistoryEntity[]>;
    expireOrders(): Promise<void>;
    approvalTravelDate(body: any): Promise<OrderEntity>;
    approveOrder(body: any, filename: string): Promise<OrderEntity>;
    deleteTicketImage(orderNumber: string): Promise<OrderEntity>;
    saveArrayData(data: any[], sendToWhatsApp: boolean): Promise<any>;
    updateExpirationDates(): Promise<{
        message: string;
        updatedOrders: OrderEntity[];
    }>;
    create(createOrderDto: any): Promise<{
        order: OrderEntity[];
        wablas: Promise<{
            apiResponse: any;
            id: number;
            deviceId: string;
            deviceName: string;
            whatsappNumber: string;
            domain: string;
            apiKeyToken: string;
            secretKey: string;
            user: import("../user/entities/user.entity").UserEntity;
        }>;
    } | {
        order: OrderEntity[];
        wablas?: undefined;
    }>;
    checkIfExists(orderNumber?: string, operatorContract?: string): Promise<{
        exists: boolean;
    }>;
    findAll(filters: {
        status?: string;
        operator?: number;
        page?: number;
        limit?: number;
        search?: string;
        dateFrom?: string;
        dateTo?: string;
    }): Promise<{
        total: number;
        totalPages: number;
        hasMore: boolean;
        results: OrderEntity[];
    }>;
    statusEnum(): Promise<OrderStatus[]>;
    findOne(id: number): Promise<{
        operator: string;
        id: number;
        orderNumber: string;
        patientName: string;
        idCard: string;
        userPhone: string;
        itinerary: string;
        creationDate: Date;
        expirationDate: Date | null;
        travelDate: Date | null;
        approvalDate: Date | null;
        approvalTravelDate: Date | null;
        ticketNumber: string;
        quantity: number;
        approvalQuantity: number;
        authorizationNumber: string;
        operatorContract: string;
        value: number;
        netValue: number;
        origin: string;
        destination: string;
        client: string;
        remarks: string;
        status: OrderStatus;
        ticketImage: string;
        backticketHistory: BackTicketEntity[];
        email: string;
        orderHistory: OrderHistoryEntity[];
    }>;
    findManyByPhone(userPhone: string): Promise<{
        operator: string;
        id: number;
        orderNumber: string;
        patientName: string;
        idCard: string;
        userPhone: string;
        itinerary: string;
        creationDate: Date;
        expirationDate: Date | null;
        travelDate: Date | null;
        approvalDate: Date | null;
        approvalTravelDate: Date | null;
        ticketNumber: string;
        quantity: number;
        approvalQuantity: number;
        authorizationNumber: string;
        operatorContract: string;
        value: number;
        netValue: number;
        origin: string;
        destination: string;
        client: string;
        remarks: string;
        status: OrderStatus;
        ticketImage: string;
        backticketHistory: BackTicketEntity[];
        email: string;
        orderHistory: OrderHistoryEntity[];
    }[]>;
    orderNumber(orderNumber: string): Promise<{
        operator: string;
        id: number;
        orderNumber: string;
        patientName: string;
        idCard: string;
        userPhone: string;
        itinerary: string;
        creationDate: Date;
        expirationDate: Date | null;
        travelDate: Date | null;
        approvalDate: Date | null;
        approvalTravelDate: Date | null;
        ticketNumber: string;
        quantity: number;
        approvalQuantity: number;
        authorizationNumber: string;
        operatorContract: string;
        value: number;
        netValue: number;
        origin: string;
        destination: string;
        client: string;
        remarks: string;
        status: OrderStatus;
        ticketImage: string;
        backticketHistory: BackTicketEntity[];
        email: string;
        orderHistory: OrderHistoryEntity[];
    }>;
    createBackTicket(orderNumber: string, body: any): Promise<{
        operator: string;
        id: number;
        orderNumber: string;
        patientName: string;
        idCard: string;
        userPhone: string;
        itinerary: string;
        creationDate: Date;
        expirationDate: Date | null;
        travelDate: Date | null;
        approvalDate: Date | null;
        approvalTravelDate: Date | null;
        ticketNumber: string;
        quantity: number;
        approvalQuantity: number;
        authorizationNumber: string;
        operatorContract: string;
        value: number;
        netValue: number;
        origin: string;
        destination: string;
        client: string;
        remarks: string;
        status: OrderStatus;
        ticketImage: string;
        backticketHistory: BackTicketEntity[];
        email: string;
        orderHistory: OrderHistoryEntity[];
    }>;
    update(id: number, body: any): Promise<{
        operator: string;
        id: number;
        orderNumber: string;
        patientName: string;
        idCard: string;
        userPhone: string;
        itinerary: string;
        creationDate: Date;
        expirationDate: Date | null;
        travelDate: Date | null;
        approvalDate: Date | null;
        approvalTravelDate: Date | null;
        ticketNumber: string;
        quantity: number;
        approvalQuantity: number;
        authorizationNumber: string;
        operatorContract: string;
        value: number;
        netValue: number;
        origin: string;
        destination: string;
        client: string;
        remarks: string;
        status: OrderStatus;
        ticketImage: string;
        backticketHistory: BackTicketEntity[];
        email: string;
        orderHistory: OrderHistoryEntity[];
    }>;
    deleteBackTicket(id: number): Promise<import("typeorm").DeleteResult>;
    remove(id: number): Promise<import("typeorm").DeleteResult>;
}
